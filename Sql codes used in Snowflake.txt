

----------------------------------------------------------------------------------------------------------
# CREATION OF YELP REVIEWS TABLE




create or replace table yelp_reviews (review_text variant);

copy into yelp_reviews
from 's3://end-to-end-analytics-project-sp/from_local/'

CREDENTIALS= (
AWS_KEY_ID='*****************'
AWS_SECRET_KEY='****************************************')
FILE_FORMAT=(TYPE=JSON);

 create or replace table tbl_yelp_reviews as 
select sentiment_analyser(Review_Text) as Polarity_score,
review_text:business_id :: string as Business_Id,
review_text:text :: string as Review_Text,
review_text:date :: date as Review_Date,
review_text:stars :: int as Review_Stars
 from yelp_reviews 

----------------------------------------------------------------------------------------------------------
# CREATION OF YELP BUSINESS TABLE


create or replace table yelp_business (business_text variant);

copy into yelp_business
from 's3://end-to-end-analytics-project-sp/business_file/yelp_academic_dataset_business.json'

CREDENTIALS= (
AWS_KEY_ID='*******************************'
AWS_SECRET_KEY='*********************************')
FILE_FORMAT=(TYPE=JSON);


 create or replace table tbl_yelp_business as 
select 
business_text:business_id :: string as Business_Id,
business_text:categories :: string as Categories,
business_text:review_count :: int as Review_count,
Trim(initcap(business_text:city)) :: string as City,
business_text:stars :: int as Reviw_stars,
business_text:state :: string as State,
trim(A.Value) as Category
 from yelp_business,
lateral split_to_table(Categories,',') A



---------------------------------------------------------------------------------------------------------------------

#USER DEFINED FUNCTION



create or replace function sentiment_analyser(TEXT STRING)
  RETURNS STRING
  LANGUAGE PYTHON
  PACKAGES =('textblob')
  RUNTIME_VERSION='3.8'
  HANDLER='get_sentiment'
  
  as 
  $$

from textblob import TextBlob as tb
def get_sentiment(text):
    blob=tb(text)
    print(blob.sentiment.polarity)
    if blob.sentiment.polarity>0 :
        return "Positive"
    elif blob.sentiment.polarity==0 :
        return "Neutral"
    else :
        return "Negative"

  $$

 



 
